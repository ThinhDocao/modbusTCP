package mavenproject;

import java.net.InetAddress;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.ghgande.j2mod.modbus.io.ModbusTCPTransaction;
import com.ghgande.j2mod.modbus.msg.ModbusResponse;
import com.ghgande.j2mod.modbus.msg.ReadMultipleRegistersRequest;
import com.ghgande.j2mod.modbus.msg.ReadMultipleRegistersResponse;
import com.ghgande.j2mod.modbus.net.TCPMasterConnection;
import com.ghgande.j2mod.modbus.procimg.InputRegister;

public class RunableThead extends runJob implements Runnable{

	private Integer key;
	
	RunableThead(Integer key){
		this.key = key;
	}
	
	Statement stmt = null;
	@Override
	public void run() {
		try {
			
		    HashMap<Integer, InputRegister> rgOffset = new HashMap<Integer,InputRegister>(); 
			ModbusModel modbusModel = new ModbusModel();
			
			stmt = null;
			try (Connection conn = getConnection()) {
				StringBuffer sqlObject = new StringBuffer();
		        	
				sqlObject.append("	SELECT	");
				sqlObject.append("	    addressip ipAddress ,	");
				sqlObject.append("	    port ,	");
				sqlObject.append("	    unitid unitId	");
				sqlObject.append("	FROM	");
				sqlObject.append("	    modbus_info	");
				sqlObject.append("	WHERE	");
				sqlObject.append("	    id = "+key+"	");
		        	
		        	stmt = conn.createStatement();
					ResultSet rs = stmt.executeQuery(sqlObject.toString());	
					
					while (rs.next()) {
						modbusModel = modbusConfigInfi(rs);				
		            }
				    
				    stmt.close();
				    if (conn != null) conn.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			
			List<modbusAddressModel> dd =  map.get(key);
			
			if(dd.size()>0) {
				int startModbus =dd.get(0).getRegisterOffSet();
				int vt = 1;
				List<StartAndCountInfoModel> listST = new ArrayList<>();
				StartAndCountInfoModel st = new StartAndCountInfoModel();
				while(2>1) {
					st.setStart(startModbus);
					int countEnd = (dd.get(dd.size()- vt).getRegisterOffSet() ) ;
					if(countEnd - startModbus < 10) {
						st.setCount(countEnd + (dd.get(dd.size()- vt).getSizeByte() /2) - 1) ;
						listST.add(st);
						if(vt == 1) {
							modbusModel.setStartAndCount(listST);
							break;
						}else {
							st = new StartAndCountInfoModel();
							startModbus = (dd.get(dd.size()- vt + 1).getRegisterOffSet() ) ;
							vt =1; 
						}
					}else {
						vt++;
					}
				}
				
			}
			
			try {
				TCPMasterConnection con = null;
				ModbusTCPTransaction trans = null;
				final InetAddress address = InetAddress.getByName(modbusModel.getIpAddress());
				con = new TCPMasterConnection(address);
				con.setPort(modbusModel.getPort());
//				con.setTimeout(1000);
				con.connect();
				int countAddress =  0;
				for(StartAndCountInfoModel ls : modbusModel.getStartAndCount()) {
					int addressId = ls.getStart();
					int fa = ls.getCount() - addressId + 1 ;
					countAddress = addressId;
					
					ReadMultipleRegistersRequest ainRes = new ReadMultipleRegistersRequest(addressId,fa);
					ReadMultipleRegistersResponse aina = new ReadMultipleRegistersResponse();
					   ainRes.setUnitID(modbusModel.getUnitId());
					   trans = new ModbusTCPTransaction(con);
		
					   trans.setRetries(5);
			           trans.setReconnecting(true);
			           trans.setRequest(ainRes);
			           trans.execute();
			           ModbusResponse res = trans.getResponse();
			           aina = (ReadMultipleRegistersResponse) res;
			           
			           for(int jk = 0;jk < fa; jk++) {
			        	   if(aina.getRegisterValue(jk) == 65535) {
			        		   aina.getRegister(jk).setValue(0);
			        	   }
			        	   rgOffset.put(countAddress, aina.getRegister(jk));
			        	   countAddress ++;
			           }
				}
				con.close();
			}catch (Exception e) {
				e.printStackTrace();
			}
			
			List<InputRegister> putArray = new ArrayList<>();	
			for(modbusAddressModel lr : dd) {
				putArray = new ArrayList<>();	
				int sizebyte = lr.getSizeByte() / 2;
				if(sizebyte == 1) {
					lr.setValueNewByLong(new Long(rgOffset.get(lr.getRegisterOffSet()).getValue()));
					continue;
				}
					
				for(int v = 0; v<sizebyte;v++) {
					putArray.add(rgOffset.get(lr.getRegisterOffSet() + v));
				}
				
				if(lr.getDataType().contains("Unsigned_int")) {
					if(lr.getDataType().contains("swap")) {
						lr.setValueNewByLong(toIntSwap(putArray));
					}else {
						lr.setValueNewByLong(toInt(putArray));
					}
				}else if(lr.getDataType().contains("Float")) {
					if(lr.getDataType().contains("swap")) {
						lr.setValueNewByFloat(toFloatSwap(putArray));
					}else {
						lr.setValueNewByFloat(toFloat(putArray));
					}
					
				}else if(lr.getDataType().contains("SPECICAL")) {
					if(lr.getDataType().contains("swap")) {
						lr.setValueNewByLong(toIntSwap(putArray));
					}else {
						lr.setValueNewByLong(toInt(putArray));
					}
				}
			}
			modbusList.put(key, rgOffset);
			
			
			String columnInsert = "yyyymmdd,yyyymmddhhmmss,";
			String valueInsert = "";
			
			valueInsert += "'"+DateTimeFormatter.ofPattern("yyyyMMdd").format(LocalDateTime.now()) +"' ,";  
			valueInsert += "'"+DateTimeFormatter.ofPattern("yyyyMMddHHmmss").format(LocalDateTime.now()) +"' ,";  
			for(modbusAddressModel lr : dd) {
				columnInsert += lr.getMeterData()  + " ,";
				String val = String.valueOf(lr.getValueNewByLong()!=null ? lr.getValueNewByLong() : (lr.getValueNewByFloat() !=null ? lr.getValueNewByFloat() : 0));
				valueInsert += "'"+ val +"' ," ;
			}
			columnInsert= columnInsert.substring(0,columnInsert.length() - 1);
			valueInsert= valueInsert.substring(0,valueInsert.length() - 1);
			
			stmt = null;
			try (Connection conn = getConnection()) {
				StringBuffer sqlObject = new StringBuffer();
		        	
				sqlObject.append("	insert into modbus_data	(");
				sqlObject.append("	    "+columnInsert+" ");
				sqlObject.append("	    ) 	");
				sqlObject.append("	  values	");
				sqlObject.append("	(	");
				sqlObject.append("	    "+ valueInsert +"	");
				sqlObject.append("	)	");
		        	
		        	stmt = conn.createStatement();
					stmt.executeUpdate(sqlObject.toString());	
					
				    
				    stmt.close();
				    if (conn != null) conn.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		
		
		
	}

}
